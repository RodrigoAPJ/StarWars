// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_fulcrum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FulcrumClient is the client API for Fulcrum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FulcrumClient interface {
	F_GetNumberRebels(ctx context.Context, in *F_FromLeia, opts ...grpc.CallOption) (*F_ToLeia, error)
	F_SendCommand(ctx context.Context, in *F_From_Informante, opts ...grpc.CallOption) (*F_To_Informante, error)
	F_Request(ctx context.Context, in *Fantasma, opts ...grpc.CallOption) (*F_Merge_Data, error)
	F_Merge(ctx context.Context, in *F_Merge_Data, opts ...grpc.CallOption) (*Fantasma, error)
}

type fulcrumClient struct {
	cc grpc.ClientConnInterface
}

func NewFulcrumClient(cc grpc.ClientConnInterface) FulcrumClient {
	return &fulcrumClient{cc}
}

func (c *fulcrumClient) F_GetNumberRebels(ctx context.Context, in *F_FromLeia, opts ...grpc.CallOption) (*F_ToLeia, error) {
	out := new(F_ToLeia)
	err := c.cc.Invoke(ctx, "/Fulcrum/F_GetNumberRebels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) F_SendCommand(ctx context.Context, in *F_From_Informante, opts ...grpc.CallOption) (*F_To_Informante, error) {
	out := new(F_To_Informante)
	err := c.cc.Invoke(ctx, "/Fulcrum/F_SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) F_Request(ctx context.Context, in *Fantasma, opts ...grpc.CallOption) (*F_Merge_Data, error) {
	out := new(F_Merge_Data)
	err := c.cc.Invoke(ctx, "/Fulcrum/F_Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fulcrumClient) F_Merge(ctx context.Context, in *F_Merge_Data, opts ...grpc.CallOption) (*Fantasma, error) {
	out := new(Fantasma)
	err := c.cc.Invoke(ctx, "/Fulcrum/F_Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FulcrumServer is the server API for Fulcrum service.
// All implementations must embed UnimplementedFulcrumServer
// for forward compatibility
type FulcrumServer interface {
	F_GetNumberRebels(context.Context, *F_FromLeia) (*F_ToLeia, error)
	F_SendCommand(context.Context, *F_From_Informante) (*F_To_Informante, error)
	F_Request(context.Context, *Fantasma) (*F_Merge_Data, error)
	F_Merge(context.Context, *F_Merge_Data) (*Fantasma, error)
	mustEmbedUnimplementedFulcrumServer()
}

// UnimplementedFulcrumServer must be embedded to have forward compatible implementations.
type UnimplementedFulcrumServer struct {
}

func (UnimplementedFulcrumServer) F_GetNumberRebels(context.Context, *F_FromLeia) (*F_ToLeia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F_GetNumberRebels not implemented")
}
func (UnimplementedFulcrumServer) F_SendCommand(context.Context, *F_From_Informante) (*F_To_Informante, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F_SendCommand not implemented")
}
func (UnimplementedFulcrumServer) F_Request(context.Context, *Fantasma) (*F_Merge_Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F_Request not implemented")
}
func (UnimplementedFulcrumServer) F_Merge(context.Context, *F_Merge_Data) (*Fantasma, error) {
	return nil, status.Errorf(codes.Unimplemented, "method F_Merge not implemented")
}
func (UnimplementedFulcrumServer) mustEmbedUnimplementedFulcrumServer() {}

// UnsafeFulcrumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FulcrumServer will
// result in compilation errors.
type UnsafeFulcrumServer interface {
	mustEmbedUnimplementedFulcrumServer()
}

func RegisterFulcrumServer(s grpc.ServiceRegistrar, srv FulcrumServer) {
	s.RegisterService(&Fulcrum_ServiceDesc, srv)
}

func _Fulcrum_F_GetNumberRebels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F_FromLeia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).F_GetNumberRebels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulcrum/F_GetNumberRebels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).F_GetNumberRebels(ctx, req.(*F_FromLeia))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_F_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F_From_Informante)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).F_SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulcrum/F_SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).F_SendCommand(ctx, req.(*F_From_Informante))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_F_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fantasma)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).F_Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulcrum/F_Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).F_Request(ctx, req.(*Fantasma))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fulcrum_F_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(F_Merge_Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FulcrumServer).F_Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fulcrum/F_Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FulcrumServer).F_Merge(ctx, req.(*F_Merge_Data))
	}
	return interceptor(ctx, in, info, handler)
}

// Fulcrum_ServiceDesc is the grpc.ServiceDesc for Fulcrum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fulcrum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Fulcrum",
	HandlerType: (*FulcrumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "F_GetNumberRebels",
			Handler:    _Fulcrum_F_GetNumberRebels_Handler,
		},
		{
			MethodName: "F_SendCommand",
			Handler:    _Fulcrum_F_SendCommand_Handler,
		},
		{
			MethodName: "F_Request",
			Handler:    _Fulcrum_F_Request_Handler,
		},
		{
			MethodName: "F_Merge",
			Handler:    _Fulcrum_F_Merge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fulcrum.proto",
}
